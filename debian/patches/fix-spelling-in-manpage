http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=534236

Index: devtodo/doc/devtodo.1.in
===================================================================
--- devtodo.orig/doc/devtodo.1.in	2012-06-18 18:37:35.000000000 -0700
+++ devtodo/doc/devtodo.1.in	2012-06-18 18:39:51.000000000 -0700
@@ -3,7 +3,7 @@
 .SH "NAME"
 .LP 
 todo \- a reminder/task program aimed at developers
-.SH "SYNPOSIS"
+.SH "SYNOPSIS"
 .LP 
 .TP 
 \fBtodo [\fI<options>\fP]\fP
@@ -196,7 +196,7 @@
 .br
 format generated=%2i-%T%2i  (added %d, priority %p)\\n\\n
 .LP
-There are four seperate format options: \fIdisplay\fR, \fIgenerated\fR, \fIverbose\-display\fR and \fIverbose-generated\fR. The latter two are used to format their respective text when \-\-verbose is specified as an argument to todo.
+There are four separate format options: \fIdisplay\fR, \fIgenerated\fR, \fIverbose\-display\fR and \fIverbose-generated\fR. The latter two are used to format their respective text when \-\-verbose is specified as an argument to todo.
 .LP
 In addition, users can create their own format strings by simply passing a different identifier to \fIformat\fR. This can then be enabled by using \fI\-\-use\-format\fR. eg.
 .LP
@@ -213,7 +213,7 @@
 The \fI>\fR flag sets the number of spaces \fI<n>\fR to use for all future indenting.
 .TP
 \fB%[+|-][<n>]i\fR
-Indent to depth of current item. \fI<n>\fR specifies the depth to indent to. If \fI<n>\fR is ommitted, the current level is used. Relative values can be used. eg. '%+1T' would indent to one level higher than the current indentation level.
+Indent to depth of current item. \fI<n>\fR specifies the depth to indent to. If \fI<n>\fR is omitted, the current level is used. Relative values can be used. eg. '%+1T' would indent to one level higher than the current indentation level.
 .TP
 \fB%[+|-][<n>]T\fR
 Display the text of the item, wrapped at 80 characters and indented to the specified level. Semantics of \fI<n>\fR are as with \fI%i\fR. Note that wrapped text automatically adds a '\n' at the end of the text, whereas \fI%t\fR will not.
@@ -257,12 +257,12 @@
 .LP
 This will sort firstly by whether an item is completed and secondly by their text. This effectively groups items into two blocks \- those that are complete and those that aren't.
 .LP
-The keys that are available are \fIcreated\fR, \fIcompleted\fR, \fItext\fR, \fIpriority\fR, \fIduration\fR, \fInone\fR and \fIdone\fR. Each key, except \fInone\fR can be prefixed with a - to reverse its default order and multiple keys must be seperated with a ,.
+The keys that are available are \fIcreated\fR, \fIcompleted\fR, \fItext\fR, \fIpriority\fR, \fIduration\fR, \fInone\fR and \fIdone\fR. Each key, except \fInone\fR can be prefixed with a - to reverse its default order and multiple keys must be separated with a ,.
 .LP
 If multiple \-\-sort parameters are encountered the last one is used. This means that a 'sort' entry in ~/.todorc will be overridden by any on the command line.
 .SH "INDICES"
 .LP 
-Indicies are used as options to a variety of command line arguments. Multiple note indices are seperated with commas (spaces are \fInot\fR allowed). Children are scoped using a '.'.
+Indicies are used as options to a variety of command line arguments. Multiple note indices are separated with commas (spaces are \fInot\fR allowed). Children are scoped using a '.'.
 .LP 
 For example, given the following notes:
 
